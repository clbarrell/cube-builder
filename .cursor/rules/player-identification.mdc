---
description: Standards for player identification and name handling in multiplayer
globs: server*, src/game/state*, src/services/socket*
alwaysApply: false
---
# Player Identification and Name Handling

## Core Principles

1. **Socket ID as Primary Identifier**
   - Always use `socket.id` as the primary identifier for players in the game state
   - Store players in a map/record with socket.id as the key: `gameState.players[socket.id]`
   - Use socket.id for all server-side operations that need to identify a player

2. **Player Names as Display Values**
   - Player names are for display purposes only
   - Names can be modified (e.g., when there's a conflict)
   - Names should never be used as primary identifiers

3. **Cube Ownership**
   - Cubes should store the owner's socket.id as `playerId`
   - This ensures ownership persists even if player names change
   - Ownership checks should compare against socket.id, not player name

## Server-Side Implementation

```typescript
// Game state structure
const gameState = {
  players: {}, // Keyed by socket.id
  cubes: [],   // Each cube has playerId = socket.id
};

// Name conflict resolution
socket.on("player:join", (data) => {
  const { name, position } = data;
  let uniqueName = name;
  
  // Check for name conflicts with active players
  while (
    Object.entries(gameState.players).some(
      ([playerId, player]) => 
        player.name === uniqueName && 
        playerId !== socket.id
    )
  ) {
    // Add number suffix for conflicts
    uniqueName = `${name}${counter++}`;
  }
  
  // Create player with socket.id as ID
  gameState.players[socket.id] = {
    id: socket.id,
    name: uniqueName,
    // other properties...
  };
});
```

## Client-Side Implementation

```typescript
// In PlayerState.ts
const joinGame = async (name, position) => {
  const socket = await ensureSocketConnected();
  const success = await joinGameService(name, position);
  
  if (success) {
    // Always use socket.id as the player ID
    set({
      localPlayerId: socket.id,
      localPlayerName: name,
    });
  }
  
  return success;
};

// Handle name modifications
onNameModified(({ original, modified }) => {
  // Only update the name, not the ID
  set({
    localPlayerName: modified,
  });
  
  setLocalPlayerName(modified);
});
```

## Common Pitfalls to Avoid

1. ❌ **Never use player names as keys in objects/maps**
   ```typescript
   // WRONG
   gameState.players[playerName] = player;
   ```

2. ❌ **Never use player names for ownership checks**
   ```typescript
   // WRONG
   if (cube.playerId === playerName) { ... }
   ```

3. ❌ **Never set localPlayerId to the player name**
   ```typescript
   // WRONG
   set({ localPlayerId: name });
   ```

4. ✅ **Always use socket.id for player identification**
   ```typescript
   // CORRECT
   gameState.players[socket.id] = player;
   if (cube.playerId === socket.id) { ... }
   set({ localPlayerId: socket.id });
   ```

## Debugging Tips

If player-related issues occur:

1. Check that `localPlayerId` is set to the socket.id, not the player name
2. Verify that cube ownership is being checked against socket.id
3. Ensure player objects are stored with socket.id as the key
4. Confirm that name conflicts are only modifying the name, not the ID 