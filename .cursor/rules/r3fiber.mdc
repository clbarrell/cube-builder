---
description: use code rules
globs: *.tsx, *.ts
alwaysApply: true
---

You are an expert in React, Vite, Tailwind CSS, three.js, React three fiber.
  
Key Principles
  - Write concise, technical responses with accurate React examples.
  - Use functional, declarative programming. Avoid classes.
  - Prefer iteration and modularization over duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading).
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  - Use the Receive an Object, Return an Object (RORO) pattern.
  
JavaScript
  - Use "function" keyword for pure functions. Omit semicolons.
  - Use TypeScript for all code. Prefer interfaces over types. Avoid enums, use maps.
  - File structure: Exported component, subcomponents, helpers, static content, types.
  - Avoid unnecessary curly braces in conditional statements.
  - For single-line statements in conditionals, omit curly braces.
  - Use concise, one-line syntax for simple conditional statements (e.g., if (condition) doSomething()).
  
Error Handling and Validation
  - Prioritize error handling and edge cases:
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the happy path last in the function for improved readability.
  - Avoid unnecessary else statements; use if-return pattern instead.
  - Use guard clauses to handle preconditions and invalid states early.
  - Implement proper error logging and user-friendly error messages.
  - Consider using custom error types or error factories for consistent error handling.
  
React
  - Use functional components and interfaces.
  - Use declarative JSX.
  - Use const for components.
  - Use shadcn components (you'll need to install them) and Tailwind CSS for components and styling.
  - Implement responsive design with Tailwind CSS.
  - Implement responsive design.
  - Place static content and interfaces at file end.
  - Use content variables for static content outside render functions.
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: WebP format, size data, lazy loading.
  - Model expected errors as return values: Avoid using try/catch for expected errors in Server Actions. Use useActionState to manage these errors and return them to the client.
  - Use error boundaries for unexpected errors: Implement error boundaries using error.tsx and global-error.tsx files to handle unexpected errors and provide a fallback UI.
  - Use useActionState with react-hook-form for form validation.
  

  ## Project Structure
```
/Users/chrisbarrell/Code/cube-builder
├── README.md
├── dist
|  ├── assets
|  |  ├── index-BYF8fwat.css
|  |  └── index-CFpG8DRe.js
|  ├── index.html
|  ├── server.js
|  └── vite.svg
├── docs
|  ├── multiplayer.md
|  └── timer.md
├── eslint.config.js
├── index.html
├── package.json
├── pnpm-lock.yaml
├── public
|  └── vite.svg
├── server.ts
├── src
|  ├── App.css
|  ├── App.tsx
|  ├── assets
|  |  ├── models
|  |  ├── react.svg
|  |  ├── sounds
|  |  └── textures
|  |     └── skybox
|  ├── components
|  |  ├── ErrorBoundary.tsx
|  |  ├── UI
|  |  |  ├── ControlsHelp.tsx
|  |  |  ├── Crosshair.tsx
|  |  |  ├── CubeCounter.tsx
|  |  |  ├── CubePositionDebug.tsx
|  |  |  ├── CursorDebug.tsx
|  |  |  ├── GameStateUI.tsx
|  |  |  ├── PlayerCounter.tsx
|  |  |  ├── PlayerNameInput.tsx
|  |  |  ├── PositionBar.tsx
|  |  |  ├── ServerCommandBar.tsx
|  |  |  └── TimerDisplay.tsx
|  |  ├── controls
|  |  |  └── FirstPersonControls.tsx
|  |  ├── environment
|  |  |  ├── Floor.tsx
|  |  |  ├── Lighting.tsx
|  |  |  ├── ProceduralSky.tsx
|  |  |  ├── Skybox.tsx
|  |  |  └── TexturedSkybox.tsx
|  |  └── objects
|  |     ├── BasicShapes.tsx
|  |     ├── Cube.tsx
|  |     ├── CubePlacementPreview.tsx
|  |     ├── Cubes.tsx
|  |     ├── PlayerPositionSync.tsx
|  |     └── PlayerVisualization.tsx
|  ├── game
|  |  ├── state
|  |  |  ├── CubeState.ts
|  |  |  ├── DebugState.ts
|  |  |  ├── GameStateStore.ts
|  |  |  └── PlayerState.ts
|  |  └── systems
|  |     └── CollisionSystem.ts
|  ├── hooks
|  |  └── useKeyPress.ts
|  ├── index.css
|  ├── main.tsx
|  ├── postcss.config.js
|  ├── scenes
|  |  ├── FirstPersonScene.tsx
|  |  └── MainScene.tsx
|  ├── services
|  |  └── socketService.ts
|  ├── utils
|  |  └── math.ts
|  └── vite-env.d.ts
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
├── tsconfig.server.json
└── vite.config.ts

```